[{"title":"联系我们","date":"2021-06-16T16:59:40.000Z","url":"/2021/06/17/%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC/","content":"MistGPU是广州深雾科技有限公司的产品。我司的地址是广州市番禺区小谷围街立德街66号7栋201房，联系人陈先生，联系电话15218816860"},{"title":"公司介绍","date":"2021-06-16T16:59:31.000Z","url":"/2021/06/17/%E5%85%AC%E5%8F%B8%E4%BB%8B%E7%BB%8D/","content":"MistGPU是广州深雾科技有限公司的产品。 MistGPU是一个共享AI计算平台，提供简单易用的AI计算服务。用户可以在上面使用GPU服务器训练AI模型，按时间计费。"},{"title":"图形界面连接教程","date":"2021-04-19T14:06:06.000Z","url":"/2021/04/19/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["图形界面 远程桌面连接"],"content":"MistGPU下的所有机器已在最新镜像中支持图形界面访问，具体使用方法如下。 获取IP及端口点击服务器附加功能一列的使用帮助，查看服务器IP以及图形界面端口。 连接WindowsWindows平台使用自带的远程桌面连接即可，此应用可在开始菜单中搜索找到。 之后在计算机一栏中输入服务器IP:图形界面端口回车即可。如本例中输入gpu28.mistgpu.com:40501。 之后点击连接即可，如弹出证书警告点击是。 macOSmacOS用户需要先在应用商店中搜索远程桌面连接，下载后安装即可。 安装完成后打开应用，点击工具栏的➕，选择添加计算机。 之后在计算机名称中输入服务器IP:图形界面端口即可，同理本例中输入gpu28.mistgpu.com:40501。 添加完成后双击连接即可。连接时会要求输入用户名和密码。 用户名为mist 密码同SSH连接密码，为创建服务器时设置的 之后确认并同意证书即可使用了 LinuxUbuntu图形界面自带有Remmina应用可使用，如未安装此应用可使用官网提供的命令安装。 启动后选择RDP协议，输入服务器IP:图形界面端口回车即可，同理本例中输入gpu28.mistgpu.com:40501。 登录mac用户在连接时已经输入过用户名和密码，可跳过此步骤Windows和Linux用户连接后均有如下界面， 用户名为mist 密码同SSH连接密码，为创建服务器时设置的 使用若是初次连接服务器，在连接后会询问图形界面布局，此对话框选择左边的Use default config即可。 之后便可正常使用了，目前图形界面内无法打开云存储(/data/和~/cloud/)目录，可通过命令行访问文件或复制到主目录下使用。 连接不上 早期镜像无图形界面，可联系客服手动安装。 请确认标点符号为英文符号。 重启机器后服务可能没有自动启动，需要在服务器终端输入sudo service xrdp restart手动重启服务。 "},{"title":"SSH连接教程","date":"2021-02-03T10:00:00.000Z","url":"/2021/02/03/SSH%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["ssh"],"content":"概述通过SSH连接可以进入到服务器执行各种操作，将会涉及到Linux命令，如不熟悉Linux命令请谨慎操作。 在开始前请参考常见问题。短时间执行的命令可以直接执行，但需要长时间的任务请务必使用screen或其他方法挂到后台运行。 网页终端Jupyter在服务器开机的状态下点击附加功能中的Jupyter即可进入。在Launcher启动页点Terminal即可。 Launcher可点击左上角篮筐中的加号启动。 网页命令行点击附加功能的命令行即可。 本地终端通用步骤在控制台可以复制SSH命令，直接粘贴到命令行中即可连接。 上图中蓝色部分为输入的内容，从上到下依次为： 粘贴ssh命令 第一次连接需要接收服务器指纹，输入yes即可 输入密码，密码为创建服务器时设置的，输入过程中不会显示在屏幕上，输完回车即可出现类似红色框中的提示则表示连接成功。(带有MistGPU字样)Windows 10系统Win10系统已自带ssh，scp等命令，在命令行或Powershell中都可直接使用。macOS按下Command + 空格键，在Spotlight中输入终端即可打开终端。Linux在应用程序中找到终端即可。Ubuntu系统可用Ctrl - alt - t快捷键启动。 Win10以下或SSH命令不可用以下几种方法的主机名(Host)和端口均可在服务器的附加功能-使用帮助中看到。 PuTTY从PuTTY官网下载PuTTY安装即可，可选择msi安装包一键安装，也可只下载PuTTY程序本身直接运行。 打开程序后填入主机名和SSH端口即可。 本例中在主机名中填入mist@gpu193.mistgpu.xyz，端口中填入20500。请以实际为准。完成后点击Open即可连接了。同理第一次连接时要点Yes按钮，之后输入创建服务器时设置的密码。 MobaXterm从MobaXterm官网下载安装即可。在下载页左边蓝色的Portable为便携版，可直接双击运行，右边绿色的Installer为安装版。 方法一：设置本地的终端为MobaXterm自带的Bash，然后在主页新建本地终端，粘贴ssh命令即可。 方法二：新建SSH会话，填入主机名和ssh端口后即可连接。 XShell该下载链接获取该软件的家庭和学校用户免费版本（建议在获取下载链接的时候选中“两者”，即下载Xshell和Xftp，前者是操作服务器的命令行窗口，后者是专门用于文件传输的），后安装打开。 点击如上图所示的图标来新建会话，在弹出来的设定窗口中，名称可任意填写，协议选择SSH。 填充完如上图所示，然后点击下方的“连接”完成设定并主动尝试连接。 完成后软件左侧会出现刚创建的会话，在弹出来的窗口（如上图所示）中填入用户名mist，并勾选“记住用户名”，点击“确定”登录。 在接下来的窗口（如上图所示）中输入创建服务器时的密码，并勾选“记住密码”后点击确定可成功连接。 常用操作连接好进入命令行终端后便可开始操作了，常用的操作命令包括 ls -l 查看当前目录下的文件; ls -l /data 查看云存储中的文件 cd 目录名 进入到指定目录; cd ../ 返回到上一级目录; cd ~/返回到主目录 pwd 查看当前目录的绝对路径 cp 文件 目录 将文件复制到目录中; mv 文件 目录将文件移动到目录中 python3 文件名.py 运行指定的python程序 pip install 包名 --user 使用pip安装模块 nvidia-smi 查看当前显卡使用情况，可用py3smi代替 unzip 要解压的文件名.zip -d 解压后的目录名 将该文件解压到指定目录下 zip -r9 保存后文件名.zip 要压缩的目录名 将目录下的所有文件压缩成文件 注意事项 所有命令均需要以英文半角状态输入，请特别留意不要漏掉命令中的空格，否则会报错。 长时间运行的任务请务必挂到后台运行，详情请见常见问题 "},{"title":"conda创建虚拟环境","date":"2021-02-03T06:00:00.000Z","url":"/2021/02/03/Conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","tags":["miniconda"],"content":"每台服务器创建时均已配好miniconda3的环境 找不到conda命令如在终端中输入conda后提示conda: command not found,则需要手动配置一下环境变量：export PATH=$PATH:/mistgpu/miniconda3*旧镜像conda目录为/home/mist/miniconda3/，新镜像为/mistgpu/miniconda3/ 创建虚拟环境在终端中输入conda create -n 环境名即可，环境名可任意取也可以在创建的时候指定所需要的包，建议用conda create -n 环境名 python=3.6创建。推荐创建时一并安装所有需要的包，这样conda可以自行匹配互相兼容的版本。 输入y开始创建。 激活环境创建完成后的环境需要激活才可生效，使用conda activate 环境名即可激活。激活后在终端提示符最左边会出现(环境名)，表示激活成功。同时可以用下面的两条命令检查是否使用的是虚拟环境里的程序。 python -V pip -V *注: 为防止pip安装时升级/降级其他已装的包导致破坏环境依赖，建议在conda创建的环境内使用conda install 包名来安装所需的包。 在Jupyter中使用conda创建的环境默认情况下，服务器附加功能里的Jupyter使用的是conda以外的环境。要想在Jupyter中使用创建后的环境需要如下配置： 使用conda activate 环境名激活环境 在虚拟环境内输入: conda install ipykernel 将ipykernel安装到默认环境中(不需要退出虚拟环境):python -m ipykernel install --user --name mistvenv --display-name &quot;虚拟环境&quot;(此命令中--name后的名称要和之前的环境名一致，--display-name后的名称可自定义) 重新打开Jupyter，完成。 已有的ipynb文件也可以通过右上角切换环境 在PyCharm中使用conda创建的环境PyCharm具体配置教程可参考连接教程/#添加SSH解释器) 使用conda activate 环境名激活环境 在虚拟环境内输入: which python 将返回的路径名(上图红框)填入SSH解释器中在解释器一栏(蓝框) 降级cuda版本在conda中可以通过安装cudatoolkit来降级cuda版本。 通过conda search cudatoolkit可以看到可安装的版本，安装使用conda install cudatoolkit=版本号。推荐一条命令内安装好所有需要的包，如conda install tensorflow-gpu=1.13.1 cudatoolkit keras ......。 本例安装cuda9.2，conda install cudatoolkit=9.2在虚拟环境里还需要装需要用到的包，使用PyTorch官方的代码安装后测试成功。 conda下载慢 / CondaHTTPError 出现这种情况时可以重试几次，如果一直失败请使用pip下载。"},{"title":"PyCharm连接教程","date":"2021-02-01T08:00:00.000Z","url":"/2021/02/01/PyCharm%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["PyCharm"],"content":"前言本教程仅适用于专业版PyCharm，社区版不支持远程连接服务器。 官网学生认证免费获得专业版 安装中文包PyCharm已有中文语言包，可在PyCharm设置 - Plugins中搜索安装，重启PyCharm即可生效。 添加SSH解释器在PyCharm打开项目后点击右下角的Python解释器选项并点击添加解释器。也可以在PyCharm设置 - 项目 - Python解释器里点击右上角的齿轮图标添加。 在添加Python解释器页面选择左边的SSH 解释器，将服务器信息填入即可。 主机名为图示篮筐部分，端口为绿框部分，添加时请确保服务器为开机状态。如不确定也可以点击红箭头指的使用帮助查看。 下一步中在解释器一栏(蓝框)的最后加上3，变成/usr/bin/python3 若使用默认环境，必须在此处加上3，否则找不到预装的包。 若使用conda虚拟环境，则需要替换为实际解释器路径。详见conda教程 同步文件夹可点击右边的文件夹图标配置，将远程路径改为主目录(/home/mist)下。本实例的所有文件都放在/home/mist/project/下，请以实际为准。 设置部署完成后在右下角会弹出“已创建到服务器的部署配置”，点击配置。 点击根路径右边的自动检测按钮，根路径应自动设置为/home/mist/。之后点击绿框中的映射 点击部署路径右边的文件夹图标，选择项目地址，本实例中选择project。注意由于之前已经设置过根路径了，因此部署路径中不再需要写/home/mist，直接写/文件夹名即可。Web路径可不填。 由于PyCharm会自动上传项目所需要的所有文件，因此如果项目里包括较大的数据集的话上传时间会很长。建议进入排除的路径，点击添加排除的路径 - 本地路径。添加后的文件/文件夹PyCharm将不会自动上传。如果数据及很大请先压缩成zip格式，到上传数据集中手动上传，之后再手动解压到服务器中(参考蓝色框中的unzip命令)。 完成保存之后配置就完成了，运行和调试和在本地无区别，只要右下角显示的是远程SSH解释器就是在使用服务器的资源了。 附加在PyCharm中使用SSH连接 之后还可以点击菜单栏中的工具 - 启动SSH会话连接到服务器，边训练边使用watch py3smi命令监控GPU使用情况(如找不到此命令可使用pip install py3nvml安装)。下图红框部分为显存使用情况，篮筐部分为GPU资源整体占用情况。 从服务器上下载文件训练生成的文件都会保存在服务器上，可以点击远程主机并找到所需要的文件，右键点击就可以下载到自己的电脑上了。若找不到远程主机，则需要在工具(Tools)菜单栏中找到部署(Deployment)后点击浏览远程主机(Browse remote host)。 修改配置参数最后，如果运行的程序需要从命令行获取参数，可以修改配置文件。 比如在命令行中要求使用python3 train.py --mode train --epoch 50，则在参数一栏加上参数部分即可。 "},{"title":"VSCode连接教程","date":"2021-02-01T06:00:00.000Z","url":"/2021/02/01/VSCode%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["VSCode"],"content":"首先从VSCode官网下载并安装VSCode。 安装中文包打开软件后可参考图示，先在插件中安装中文语言包，方便操作。 安装插件之后继续在插件中输入Remote-ssh安装ssh插件。 添加服务器进入远程资源管理器，鼠标移到SSH Targets上时会出现一个加号，点击加号并输入SSH命令。 SSH命令可以在控制台中点击复制。(服务器必须为开机状态才可以连) 出现这个框直接回车即可，SSH配置信息将保存到提示的文件中。 配置连接 完成后点击Host Added中的Connect，或将鼠标移到远程资源管理器的服务器中，点击在新窗口中打开。 出现这个框提示选择远程主机平台类型，请点击选择Linux或默认回车。 之后这个提示接受服务器密匙，选择continue或默认回车。 最后输入创建服务器时设置的密码，回车就完成了。 打开文件夹连接成功后在资源管理器中点击打开文件夹，选择实际项目的文件夹即可。本例中所有项目文件都在/home/mist/project下，请以实际为准。 开始运行之后就可以在资源管理器中查看到服务器上的文件了，点击py文件若提示需要安装python拓展则直接点击安装即可。最后点击右上角的三角运行图标就可以运行了，如需调试请参考官方文档配置。 当前GPU占用和显存占用等信息可以在终端用py3smi命令查看。如找不到此命令可使用pip install py3nvml --user安装 附加：配置公钥连接 生成公钥 Linux、macOS、Win10以上系统可以在命令行输入ssh-keygen命令生成SSH密钥，之后的提示可以一路回车。生成的公钥在用户目录下， Linux, macOS: ~/.ssh/id_rsa.pub Windows: C:\\Users\\用户名\\.ssh\\id_rsa.pub 将公钥上传到服务器 之后可以使用scp命令或jupyter将该文件上传到服务器中(以主目录/home/mist/为例)。 在服务器上将公钥添加 使用SSH连上服务器或使用服务器附加功能里的命令行，执行 mkdir ~/.ssh cat ~/id_rsa.pub &gt; ~/.ssh/authorized_keys chown 600 ~/.ssh/authorized_keys sudo service ssh restart 修改VSCode连接配置 在VSCode的远程资源管理页点击齿轮，选择SSH配置文件(默认回车)，在服务器配置最后一行加上PasswordAuthentication no(注意对齐缩进) 保存即可。 提示无法连接：试图写入的管道不存在解决方案 1 若仍不行则考虑解决方案 2或使用终端运行。"},{"title":"TensorBoard教程","date":"2020-07-27T04:23:00.000Z","url":"/2020/07/27/TensorBoard%E6%95%99%E7%A8%8B/","content":"TensorBoard官方文档 概述TensorBoard是Tensorflow的可视化工具，它通过对Tensoflow程序运行过程中输出的日志文件进行可视化Tensorflow程序的运行状态。本文将介绍如何在服务器中启动TensorBoard，并从本地访问。 服务器端首先从控制台中附加功能一栏的使用帮助中获取服务器地址。 在服务器信息一栏中可找到主机名IP和开放端口 接下来进入到命令行中，输入tensorboard --host 0.0.0.0 --port 开放端口 --logdir 日志文件目录 例如这里开放端口是30324，则输入tensorboard --host 0.0.0.0 --port 30324 --logdir /tmp。 若有如下输出则表示成功启动： 本地端打开浏览器，在地址栏中输入主机名:开放端口，如gpu82.mistgpu.xyz:30324。 成功访问： "},{"title":"Windows下上传和下载文件的使用教程","date":"2020-04-08T10:00:00.000Z","url":"/2020/04/08/Windows%E4%B8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%95%99%E7%A8%8B/","content":"概述本文将主要介绍Windows平台下各种上传文件到服务器和从服务器下载文件的方法，首先是建议使用我们提供的云存储功能和Jupyter附加功能，然后是win自带的命令行scp的使用，最后是一些第三方软件的使用简介。 云存储为了减少用户创建服务器后准备数据带来的成本，我们提供了云存储的方式。用户提前上传数据到云存储后，开启任何一个服务器都能迅速准备好数据。 上传文件首先进入控制台左侧的上传文件处，可以点击“选择文件”进行文件选择，按住Ctrl可选择多个文件。上传文件支持断点续传，故不用担心大文件在上传中途断线，重新上传将会在某个记录点继续上传。要注意的是，我们暂时不支持上传文件夹或者＞30G的文件，原因是上传速度会比我们建议的方式慢，且太大的文件虽然可以断点续传，但是由于您个人网络问题上传太久的话，您的上传token会失效导致需要您重新操作，造成不必要的麻烦。因此我们建议将数据压缩为zip文件再上传。收到上传成功的提示后，数据便会挂载到服务器的/data目录下。 管理文件进入控制台左侧的上传文件处，可以看到“文件管理”按钮，点击便可以进入文件管理页面，可以一览您在云存储的所有文件，文件可批量删除，在该页面您也可查看当前存储总量和总存储费用。如果有些文件无法删除，可能是由于文件名的特殊字符导致的，可以直接使用 rm -rf 文件路径 进行删除。 从云存储下载到服务器可参考上上传数据集处的云存储使用说明。 zip文件：在终端里输入unzip /data/文件名.zip -d ~/，将文件名换成实际上传的文件名字即可。 任意文件：在终端里输入cp /data/文件名 ~/即可复制到服务器主目录(/home/mist)下，或将cp更换为rsync，如rsync /data/文件名 ~/从云存储复制到服务器的耗时取决于文件大小和服务器本身的下载速度，一般在5m/s左右。zip文件也可以复制到主目录下再解压。zip命令只可用于解压.zip格式的文件。 从服务器上传到云存储将文件复制到云存储的步骤和丛云存储下载类似： 压缩后保存到云存储中：终端里输入zip -rq9 /data/文件名.zip 目录名，即可将目录下的文件压缩成文件名.zip，存储在云存储中。 使用cp或rsync命令：cp 文件名 /data/或rsync 文件名 /data/即可。从服务器上传到云存储的耗时也取决于文件本身大小和服务器的上传速度。执行过程中请耐心等候，否则会造成文件损坏。 Jupyter点开服务器管理，在附加功能处看到我们提供的附加功能jupyter。Jupyter对于炼丹人来讲也是相当实用的，上传和下载文件功能俱全（上传文件速度会比使用云存储稍慢，上传小文件可以考虑用jupyter方便，大文件建议使用云存储） 上传使用Jupyter可直接上传指定文件到Jupyter的当前目录(默认为主目录)从附加功能里点开Jupyter的链接后，点下图所示的图标即可上传。 上传过程中可在底部看到进度条，等待进度条走完即可。 下载在Jupyter内右键点击需要下载的文件(不支持下载文件夹)后选择Download即可。若要下载文件夹则需要现在终端内使用unzip命令压缩。unzip -r9 保存后的文件名.zip 要压缩的目录名 scp命令scp命令推荐Linux，macOS用户使用，Windows下由于路径表示方式不同不推荐使用。使用scp命令上传需要在本机命令行中执行，不需要提前ssh连接服务器。 上传命令格式：scp -r -P端口号 要上传的文件/文件夹名 mist@服务器IP:目录 其中端口号，服务器IP可以在控制台的使用帮助中查看。以ssh mist@gpu193.mistgpu.xyz -p 20500这台机器为例，端口号为20500，服务器IP为gpu193.mistgpu.xyz 要上传的文件/文件夹名按需填写，目录为上传后的服务器路径。 如本地当前目录下有个名为access的文件夹，想要上传到服务器的主目录下，则需写scp -r -P 20500 access mist@gpu193.mistgpu.xyz:~/ 和ssh连接一样，第一次连接时需要输入yes同意密钥后再输入密码。 之后在服务器的主目录下即可看到access文件夹。 下载下载命令与上传命令类似，只需要对调本地和远程路径即可。如scp -r -P端口号 mist@服务器IP:目录或文件名 本地路径 其他软件MobaXterm在该下载链接获取该软件后安装打开。 第一步是点击“Session”来新建会话，在弹出来的设定窗口中选择上方的SFTP，在Basic Sftp settings进行服务器信息配置。以ssh mist@gpu28.mistgpu.xyz -p 40000为例，Remote host应填入gpu28.mistgpu.xyz，即服务器主机地址（一般在@后）；在Username中填入mist，即用户名（一般在@前）；最后将Port中的数字改成40000，即端口号（一般为-p后的数字），填充完如上图所示，然后点击下方的OK完成设定。完成后软件会试图连接，需要输入密码，输入在创建服务器时的密码后按下回车便能成功连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。 另一种方法就是参照上一个SSH使用教程，采用SSH方式进行连接，成功之后左侧会出现服务器文件列表（如上图所示），同样可以使用拖拽的方式上传和下载文件。 Xftp在该下载链接获取该软件的家庭和学校用户免费版本（建议在获取下载链接的时候选中“两者”，即下载Xshell和Xftp，前者是操作服务器的命令行窗口，后者是专门用于文件传输的），后安装打开。 第一步一样是新建会话，在弹出来的设定窗口中，名称可任意填写，协议选择SFTP。以ssh mist@gpu28.mistgpu.xyz -p 40000为例，主机应填入gpu28.mistgpu.xyz，端口号中的数字改为40000。下方可以填写用户名和密码，用户名即mist，密码就是创建服务器时输入的密码。填充完如上图所示，然后点击下方的“连接”完成设定并主动尝试连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。 WinSCP在该下载链接获取该软件后安装打开。 第一步一样是新建会话，以ssh mist@gpu28.mistgpu.xyz -p 40000为例，在弹出来的设定窗口中，主机名应填入gpu28.mistgpu.xyz，端口号中的数字改为40000，用户名填入mist，密码填入创建服务器时输入的密码，如上图所示。然后建议点击“保存”，并保存密码后登录，便可成功连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。 CyberduckmacOS用户可使用Cyberduck下载链接浏览并上传、下载文件。 下载安装后点击左上角open connection新建连接 连接类型选择sftp "},{"title":"AI主播，在线解说：腾讯AI lab提出多模态语音合成模型DurIAN","date":"2020-02-10T11:45:55.000Z","url":"/2020/02/10/AI%E4%B8%BB%E6%92%AD%EF%BC%8C%E5%9C%A8%E7%BA%BF%E8%A7%A3%E8%AF%B4%EF%BC%9A%E8%85%BE%E8%AE%AFAI-lab%E6%8F%90%E5%87%BA%E5%A4%9A%E6%A8%A1%E6%80%81%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A8%A1%E5%9E%8BDurIAN/","content":"论文笔记：腾讯AI lab多模态语音合成模型DurIAN论文：DurIAN: Duration Informed Attention Network For Multimodal Synthesis，演示地址。 概述DurIAN是腾讯AI lab于19年9月发布的一篇论文，主体思想和FastSpeech类似，都是抛弃attention结构，使用一个单独的模型来预测alignment，从而来避免合成中出现的跳词重复等问题，不同在于FastSpeech直接抛弃了autoregressive的结构，而DurIAN相当于一个去除Attention的Tacotron2/Tacotron，因为没有autoregressive，FastSpeech有了百倍的加速。除此以外，FastSpeech使用一个train好的Transformer-TTS model作为alignment信息的来源，而DurIAN使用Forced-alignment工具作为alignment信息的来源。DurIAN还利用语音+人脸特征点的数据集，让DurIAN在合成语音的同时预测对应的人脸特征点信息，从而实现AI虚拟人说话的效果；由于拥有不同情感标签的数据集，DurIAN进行了监督的情感学习，可以细粒度调整合成语音的情感，总而言之，演示的效果十分惊人。（paper中还提出了一种Multi-Band WaveRNN的结构，笔者对vocoder技术不是很熟悉，在这里就不做阐述了） 模型架构模型整体结构如下图所示，去除Attention的方法大家可以参考FastSpeech阅读笔记和Tacotron的paper，本文主要说说paper中对中文的特殊处理办法和Style Code的部分。 处理中文字符为了可以让模型学到更多地韵律、停顿信息，DurIAN在text部分加入了特殊字符（之前看过别人做中文TTS，如果不手工在句子里面加间隔，合成出来的断句可能完全是不对的），一共加了四种不同的特殊字符，其中#S表示音位的间断，#1表示prosodic words的间断，#2表示prosodic phrase的间断，#3表示intonational phrase的间断，如下图。在encoder部分这些间断作为一个单独的vector，最后encoder output要去除表示这些间断的vector，因为Forced-alignment不会给这些vector做alignment，而在CBHG结构中已经考虑过上下文，这些间断的信息已经被包含在了其他vector中了，所以这里直接丢弃。 Style Codepaper中花了很大篇幅阐明了像VAE和GST这些unsupervised model中，对style信息进行提取所存在的问题，最大的问题就是提取出来的style不具有实际意义，很难被实际应用，所以paper中使用了supervised的方法，使用了包含多种情感标签的数据进行训练。在training的时候，每个情感标签进行one-hot编码乘以embedding，得到对应情感的embedding vector，在乘以一个learnable的Control Scale获得Style Code，Style Code在模型的两个部分进行concatenate，大家可以参考第一幅图。在inference阶段，可以调节one-hot编码，比如原本one-hot中表示开心是[1, 0, 0, 0]，而inference想要合成既有开心又有兴奋的语音，就可以改为[0.5, 0, 0.5, 0]，用这种方法，DurIAN可以对合成语音进行细粒度的情感控制。 总结这篇paper让我意识到“原来语音合成还可以这么玩”，合成的效果的确很惊艳，特别是配合AI虚拟人的时候。一句题外话，FastSpeech和DurIAN都借助了一个“teacher model”，可不可以做到直接训练呢？teacher model提供的alignment会对student model的performance有什么影响吗？"}]