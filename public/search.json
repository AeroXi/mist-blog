[{"title":"PyCharm连接教程","date":"2021-02-01T08:00:00.000Z","url":"/2021/02/01/PyCharm%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["PyCharm"],"content":"本教程仅适用于专业版PyCharm，社区版不支持远程连接服务器。 官网学生认证免费获得专业版 PyCharm已有中文语言包，可在PyCharm设置 - Plugins中搜索安装，重启PyCharm即可生效。 在PyCharm打开项目后点击右下角的Python解释器选项并点击添加解释器。也可以在PyCharm设置 - 项目 - Python解释器里点击右上角的齿轮图标添加。 在添加Python解释器页面选择左边的SSH 解释器，将服务器信息填入即可。 主机名为图示篮筐部分，端口为绿框部分，添加时请确保服务器为开机状态。如不确定也可以点击红箭头指的使用帮助查看。 下一步中在解释器一栏(蓝框)的最后加上3，变成/usr/bin/python3 同步文件夹可点击右边的文件夹图标配置，将远程路径改为主目录(/home/mist)下。本实例的所有文件都放在/home/mist/project/下，请以实际为准。 完成后在右下角会弹出“已创建到服务器的部署配置”，点击配置。 点击根路径右边的自动检测按钮，根路径应自动设置为/home/mist/。之后点击绿框中的映射 点击部署路径右边的文件夹图标，选择项目地址，本实例中选择project。注意由于之前已经设置过根路径了，因此部署路径中不再需要写/home/mist，直接写/文件夹名即可。Web路径可不填。 由于PyCharm会自动上传项目所需要的所有文件，因此如果项目里包括较大的数据集的话上传时间会很长。建议进入排除的路径，点击添加排除的路径 - 本地路径。添加后的文件/文件夹PyCharm将不会自动上传。如果数据及很大请先压缩成zip格式，到上传数据集中手动上传，之后再手动解压到服务器中(参考蓝色框中的unzip命令)。 保存之后配置就完成了，运行和调试和在本地无区别，只要右下角显示的是远程SSH解释器就是在使用服务器的资源了。 之后还可以点击菜单栏中的工具 - 启动SSH会话连接到服务器，边训练边使用watch py3smi命令监控GPU使用情况(如找不到此命令可使用pip install py3nvml安装)。下图红框部分为显存使用情况，篮筐部分为GPU资源整体占用情况。 训练生成的文件都会保存在服务器上，可以点击远程主机并找到所需要的文件，右键点击就可以下载到自己的电脑上了。 最后，如果运行的程序需要从命令行获取参数，可以修改配置文件。 比如在命令行中要求使用python3 train.py --mode train --epoch 50，则在参数一栏加上参数部分即可。 "},{"title":"VSCode连接教程","date":"2021-02-01T06:00:00.000Z","url":"/2021/02/01/VSCode%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/","tags":["VSCode"],"content":"首先从VSCode官网下载并安装VSCode。 打开软件后可参考图示，先在插件中安装中文语言包，方便操作。 之后继续在插件中输入Remote-ssh安装ssh插件。 进入远程资源管理器，鼠标移到SSH Targets上时会出现一个加号，点击加号并输入SSH命令。 SSH命令可以在控制台中点击复制。(服务器必须为开机状态才可以连) 出现这个框直接回车即可，SSH配置信息将保存到提示的文件中。 完成后点击Host Added中的Connect，或将鼠标移到远程资源管理器的服务器中，点击在新窗口中打开。 出现这个框提示选择远程主机平台类型，请点击选择Linux或默认回车。 之后这个提示接受服务器密匙，选择continue或默认回车。 最后输入创建服务器时设置的密码，回车就完成了。 连接成功后在资源管理器中点击打开文件夹，选择实际项目的文件夹即可。本例中所有项目文件都在/home/mist/project下，请以实际为准。 之后就可以在资源管理器中查看到服务器上的文件了，点击py文件若提示需要安装python拓展则直接点击安装即可。最后点击右上角的三角运行图标就可以运行了，如需调试请参考官方文档配置。 当前GPU占用和显存占用等信息可以在终端用py3smi命令查看。使用pip install py3nvml --user安装"},{"title":"TensorBoard教程","date":"2020-07-27T04:23:00.000Z","url":"/2020/07/27/TensorBoard%E6%95%99%E7%A8%8B/","content":"TensorBoard使用教程TensorBoard官方文档 概述TensorBoard是Tensorflow的可视化工具，它通过对Tensoflow程序运行过程中输出的日志文件进行可视化Tensorflow程序的运行状态。本文将介绍如何在服务器中启动TensorBoard，并从本地访问。 服务器端首先从控制台中的ssh命令一栏中获取服务器地址，例如ssh mist@gpu112.mistgpu.xyz -p 10040 其中地址为gpu112.mistgpu.xyz 其次点击使用帮助，获取开放端口。 接下来进入到命令行中，输入tensorboard --host=0.0.0.0 --logdir=日志文件目录 --port=开放端口 例如这里开放端口是10044 若有如下输出则表示成功启动： 本地端打开浏览器，在地址栏中输入服务器地址:开放端口，如gpu112.mistgpu.xyz:10044。 成功访问： "},{"title":"Windows下上传和下载文件的使用教程","date":"2020-04-08T10:00:00.000Z","url":"/2020/04/08/Windows%E4%B8%8B%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E6%95%99%E7%A8%8B/","content":"概述本文将主要介绍Windows平台下各种上传文件到服务器和从服务器下载文件的方法，首先是建议使用我们提供的云存储功能和Jupyter附加功能，然后是win自带的命令行scp的使用，最后是一些第三方软件的使用简介。 云存储为了减少用户创建服务器后准备数据带来的成本，我们提供了云存储的方式。用户提前上传数据到云存储后，开启任何一个服务器都能迅速准备好数据。 上传文件首先进入控制台左侧的上传文件处，可以点击“选择文件”进行文件选择，按住Ctrl可选择多个文件。上传文件支持断点续传，故不用担心大文件在上传中途断线，重新上传将会在某个记录点继续上传。要注意的是，我们暂时不支持上传文件夹或者＞30G的文件，原因是上传速度会比我们建议的方式慢，且太大的文件虽然可以断点续传，但是由于您个人网络问题上传太久的话，您的上传token会失效导致需要您重新操作，造成不必要的麻烦。因此我们建议将数据压缩为zip文件再上传。收到上传成功的提示后，数据便会挂载到服务器的/data目录下。 管理文件进入控制台左侧的上传文件处，可以看到“文件管理”按钮，点击便可以进入文件管理页面，可以一览您在云存储的所有文件，文件可批量删除，在该页面您也可查看当前存储总量和总存储费用。如果有些文件无法删除，可能是由于文件名的特殊字符导致的，可以直接使用 rm -rf 文件路径 进行删除。 获取文件为了方便您任意创建一个服务器都能快速获取数据，我们建议您采用以下三种方式获取文件：（1）直接解压文件（以.zip形式文件为例）到本地~/目录： unzip -d ~/ 文件路径 ,例如 unzip -d ~/ /data/my_data.zip（2）用cp命令复制文件到本地~/目录下使用: cp 文件路径 ~/ ,例如: cp /data/my_data.zip ~/（3）复制大文件到本地~/目录下用rsync –progress代替可以看到进度条: rsync --progress 文件路径 ~/ ,例如： rsync --progress /data/my_data.zip ~/ 注意要等文件传完才能解压哈，不然可能会显示文件缺损等问题后两种方法如果是压缩包（.zip形式），可以使用 unzip 文件路径 解压后使用（例如在本地目录下 unzip my_data.zip ）。要注意的是，建议不要直接在/data目录下将您压缩的文件进行解压，这样会造成不必要的空间占用，以及文件夹数据获取速度往往会比压缩包获取速度慢。 保存文件您若非包月用户的话，在使用过程中难免会遇到机器被占用的情况，因此，如有必要，建议您在关机之前将关键的数据保存在云存储中，以便您在任何一个机器都能快速准备开始。同样建议您将关键文件夹压缩，然后复制回云存储挂载处：/data，下次在其他服务器使用时再通过上述操作获取数据。（1）压缩：zip -r [打包后的文件名] [打包的目录路径] ，例如 zip -r ./my_data.zip ./my_data ，其中./表示是当前目录，my_data是当前目录的文件夹，压缩后的my_data.zip同样会保存在当前目录，因为有前缀./ 。（2）复制回云存储挂载处： 这里的操作类似上面获取数据时的复制操作，不过是参数路径对换了而已。例如小文件可以使用： cp /data/ ./my_data.zip 表示的是将当前目录下的my_data.zip复制回/data/，即云存储挂载处。同理，大文件可以使用 rsync --progress /data/ ./my_data.zip 。如果要将文件下载到您电脑，建议使用下面的诸多方法，相比普通方式上传花费的时间，普通方式下载文件的时间会短很多。关于云存储如果还有其他的问题或者建议，欢迎到控制台左侧“联系客服”处告诉我们！ Jupyter点开服务器管理，在附加功能处看到我们提供的附加功能jupyter。Jupyter对于炼丹人来讲也是相当实用的，上传和下载文件功能俱全（上传文件速度会比使用云存储稍慢，上传小文件可以考虑用jupyter方便，大文件建议使用云存储），欢迎大家多多使用和探索jupyter。 上传文件上图红色框展示了上传文件的按钮，点击即可选择相应文件加入上传列表，然后在出现的上传列表点击您想上传的文件即可开始上传（注意jupyter也是不支持文件夹上传的噢）。 下载文件上图蓝色框展示了下载文件的方法，先选中文件或压缩包（注意jupyter不支持直接下载文件夹），然后上方会出现蓝色框所示的下载按钮，点击即可下载。 命令行首先参照上一个SSH使用教程启动命令行并连接上服务器。 上传文件关于上传文件，我们提供了两种方式：scp上传文件：scp -P 40000 本地路径 mist@gpu28.mistgpu.xyz:~/scp上传文件夹：scp -r -P 40000 本地路径 mist@gpu28.mistgpu.xyz:~/在命令行中输入上述命令后会提示您输入密码，即创建服务器时的密码，然后就可以直接将文件从您电脑上传到服务器的本地目录~/下，上面命令中的本地路径形如：C:\\\\Users\\\\mist\\\\Desktop\\\\my_data.zip 就是您的文件在您电脑中的存储路径。 下载文件关于下载文件，类似上传文件的指令，只是路径对调，同样是两种方式：scp下载文件：scp -P 40000 mist@gpu28.mistgpu.xyz:服务器文件路径 本地路径scp下载文件夹：scp -r -P 40000 mist@gpu28.mistgpu.xyz:服务器文件路径 本地路径在命令行中输入上述命令后会提示您输入密码，即创建服务器时的密码，然后就可以直接将文件从服务器下载到您电脑上，上面命令中的本地路径形如：C:\\\\Users\\\\mist\\\\Desktop\\\\ 就是您想要文件在您电脑中存储的路径，服务器文件路径形如：~/my_data.zip 其中~/是服务器本地目录，等价于/home/mist/。完整例子如下所示：scp -P 40000 -r mist@gpu28.mistgpu.xyz:~/my_data.zip C:\\\\Users\\\\mist\\\\Desktop\\\\ MobaXterm在该下载链接获取该软件后安装打开。 第一步是点击“Session”来新建会话，在弹出来的设定窗口中选择上方的SFTP，在Basic Sftp settings进行服务器信息配置。以ssh mist@gpu28.mistgpu.xyz -p 40000为例，Remote host应填入gpu28.mistgpu.xyz，即服务器主机地址（一般在@后）；在Username中填入mist，即用户名（一般在@前）；最后将Port中的数字改成40000，即端口号（一般为-p后的数字），填充完如上图所示，然后点击下方的OK完成设定。完成后软件会试图连接，需要输入密码，输入在创建服务器时的密码后按下回车便能成功连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。 另一种方法就是参照上一个SSH使用教程，采用SSH方式进行连接，成功之后左侧会出现服务器文件列表（如上图所示），同样可以使用拖拽的方式上传和下载文件。 Xftp在该下载链接获取该软件的家庭和学校用户免费版本（建议在获取下载链接的时候选中“两者”，即下载Xshell和Xftp，前者是操作服务器的命令行窗口，后者是专门用于文件传输的），后安装打开。 第一步一样是新建会话，在弹出来的设定窗口中，名称可任意填写，协议选择SFTP。以ssh mist@gpu28.mistgpu.xyz -p 40000为例，主机应填入gpu28.mistgpu.xyz，端口号中的数字改为40000。下方可以填写用户名和密码，用户名即mist，密码就是创建服务器时输入的密码。填充完如上图所示，然后点击下方的“连接”完成设定并主动尝试连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。 WinSCP在该下载链接获取该软件后安装打开。 第一步一样是新建会话，以ssh mist@gpu28.mistgpu.xyz -p 40000为例，在弹出来的设定窗口中，主机名应填入gpu28.mistgpu.xyz，端口号中的数字改为40000，用户名填入mist，密码填入创建服务器时输入的密码，如上图所示。然后建议点击“保存”，并保存密码后登录，便可成功连接。成功连接后，可以查看到服务器的文件，随意拖拽本地文件到该软件中服务器一方可实现上传，将服务器中的文件拖拽出来可实现下载。"},{"title":"Windows下SSH的使用教程","date":"2020-04-08T07:00:00.000Z","url":"/2020/04/08/Windows%E4%B8%8BSSH%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","content":"概述本文将主要介绍Windows平台下各种SSH连接上服务器的方法，如果您只是想在服务器中进行命令操作，建议结合您的使用习惯，使用我们提供的附加功能（如下图所示），可以直接连接上服务器操作。 下面将介绍几种SSH连接方式: 命令行启动命令行 按住如图所示的徽标键，同时按下键盘上的R，在弹出的运行命令框中输入cmd，按下回车后便能启动命令行。 运行SSH 点开服务器管理，复制如上图所示的命令，并粘贴在刚才打开的命令行窗口，然后回车。（P.S. 如果没有SSH服务，请参照这里进行配置） 第一次连接将会出现如上图所示提示，输入yes，然后回车，接下来输入您在创建服务器时输入的密码便可实现SSH连接上服务器。 WSLWSL，全称是Windows Subsystem for Linux，即适用于Linux的Windows子系统，相比于命令行的好处就是可以使用Linux的相关命令，字体渲染也比较美观，请参照这里进行WSL的安装。安装成功后可以通过快捷方式打开或者启动命令行输入wsl打开，打开以后的ssh连接操作同命令行运行SSH的方法，复制粘贴服务器管理中的命令，回车运行，输入密码进行连接。 MobaXterm在该下载链接获取该软件后安装打开。 点击如上图所示的图标来新建会话，在弹出来的设定窗口中选择上方的SSH，在Basic SSH settings进行服务器信息配置。 以ssh mist@gpu28.mistgpu.xyz -p 40000为例，Remote host应填入gpu28.mistgpu.xyz，即服务器主机地址（一般在@后）；选中Specify username，填入mist，即用户名（一般在@前）；最后将Port中的数字改成40000，即端口号（一般为-p后的数字），填充完如上图所示，然后点击下方的OK完成设定。完成后软件会试图连接，需要输入密码，输入在创建服务器时的密码后按下回车便能成功连接。 Xshell在该下载链接获取该软件的家庭和学校用户免费版本（建议在获取下载链接的时候选中“两者”，即下载Xshell和Xftp，前者是操作服务器的命令行窗口，后者是专门用于文件传输的），后安装打开。 点击如上图所示的图标来新建会话，在弹出来的设定窗口中，名称可任意填写，协议选择SSH。以ssh mist@gpu28.mistgpu.xyz -p 40000为例，主机应填入gpu28.mistgpu.xyz，端口号中的数字改为40000。 填充完如上图所示，然后点击下方的“连接”完成设定并主动尝试连接。 完成后软件左侧会出现刚创建的会话，在弹出来的窗口（如上图所示）中填入用户名mist，并勾选“记住用户名”，点击“确定”登录。 在接下来的窗口（如上图所示）中输入创建服务器时的密码，并勾选“记住密码”后点击确定可成功连接。"},{"title":"AI主播，在线解说：腾讯AI lab提出多模态语音合成模型DurIAN","date":"2020-02-10T11:45:55.000Z","url":"/2020/02/10/AI%E4%B8%BB%E6%92%AD%EF%BC%8C%E5%9C%A8%E7%BA%BF%E8%A7%A3%E8%AF%B4%EF%BC%9A%E8%85%BE%E8%AE%AFAI-lab%E6%8F%90%E5%87%BA%E5%A4%9A%E6%A8%A1%E6%80%81%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%A8%A1%E5%9E%8BDurIAN/","content":"论文笔记：腾讯AI lab多模态语音合成模型DurIAN论文：DurIAN: Duration Informed Attention Network For Multimodal Synthesis，演示地址。 概述DurIAN是腾讯AI lab于19年9月发布的一篇论文，主体思想和FastSpeech类似，都是抛弃attention结构，使用一个单独的模型来预测alignment，从而来避免合成中出现的跳词重复等问题，不同在于FastSpeech直接抛弃了autoregressive的结构，而DurIAN相当于一个去除Attention的Tacotron2/Tacotron，因为没有autoregressive，FastSpeech有了百倍的加速。除此以外，FastSpeech使用一个train好的Transformer-TTS model作为alignment信息的来源，而DurIAN使用Forced-alignment工具作为alignment信息的来源。DurIAN还利用语音+人脸特征点的数据集，让DurIAN在合成语音的同时预测对应的人脸特征点信息，从而实现AI虚拟人说话的效果；由于拥有不同情感标签的数据集，DurIAN进行了监督的情感学习，可以细粒度调整合成语音的情感，总而言之，演示的效果十分惊人。（paper中还提出了一种Multi-Band WaveRNN的结构，笔者对vocoder技术不是很熟悉，在这里就不做阐述了） 模型架构模型整体结构如下图所示，去除Attention的方法大家可以参考FastSpeech阅读笔记和Tacotron的paper，本文主要说说paper中对中文的特殊处理办法和Style Code的部分。 处理中文字符为了可以让模型学到更多地韵律、停顿信息，DurIAN在text部分加入了特殊字符（之前看过别人做中文TTS，如果不手工在句子里面加间隔，合成出来的断句可能完全是不对的），一共加了四种不同的特殊字符，其中#S表示音位的间断，#1表示prosodic words的间断，#2表示prosodic phrase的间断，#3表示intonational phrase的间断，如下图。在encoder部分这些间断作为一个单独的vector，最后encoder output要去除表示这些间断的vector，因为Forced-alignment不会给这些vector做alignment，而在CBHG结构中已经考虑过上下文，这些间断的信息已经被包含在了其他vector中了，所以这里直接丢弃。 Style Codepaper中花了很大篇幅阐明了像VAE和GST这些unsupervised model中，对style信息进行提取所存在的问题，最大的问题就是提取出来的style不具有实际意义，很难被实际应用，所以paper中使用了supervised的方法，使用了包含多种情感标签的数据进行训练。在training的时候，每个情感标签进行one-hot编码乘以embedding，得到对应情感的embedding vector，在乘以一个learnable的Control Scale获得Style Code，Style Code在模型的两个部分进行concatenate，大家可以参考第一幅图。在inference阶段，可以调节one-hot编码，比如原本one-hot中表示开心是[1, 0, 0, 0]，而inference想要合成既有开心又有兴奋的语音，就可以改为[0.5, 0, 0.5, 0]，用这种方法，DurIAN可以对合成语音进行细粒度的情感控制。 总结这篇paper让我意识到“原来语音合成还可以这么玩”，合成的效果的确很惊艳，特别是配合AI虚拟人的时候。一句题外话，FastSpeech和DurIAN都借助了一个“teacher model”，可不可以做到直接训练呢？teacher model提供的alignment会对student model的performance有什么影响吗？"}]